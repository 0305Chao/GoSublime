{
	// you may set specific environment variables here
	// e.g "env": { "PATH": "$HOME/go/bin:$PATH" }
	// in values, $PATH and ${PATH} are replaced with
	// the corresponding environment(PATH) variable, if it exists.
	"env": {},

	// Your shell. e.g. on Linux and OS X, if your shell bash:
	// you may set it to ["/bin/bash", "--login", "-c", "$CMD"]
	// it's useful to pass the --login argument in order for it run your ~/.bashrc etc.
	// otherwise environment variables may not be seen by Sublime Text and therefore GoSublime
	//
	// If set, commands are passed to it instead of the Python default which for *nix is usually
	// /bin/sh which in most cases is not what you want
	//
	// the special entry "$CMD" is replaced by the actual command
	"shell": [],

	// Whether or not gscomplete(gocode) is enabled
	"gscomplete_enabled": true,

	// the command that shall be called for gocode, this can be the command name
	// or absolute path to a binary e.g. `/go/bin/gocode`
	"gocode_cmd": "gocode",

	// Whether or not gsfmt is enabled
	"fmt_enabled": true,

	// whether or not to indent with tabs (alignment is always done using spaces)
	"fmt_tab_indent": true,

	// the assumed width of the tab character (or number of spaces to indent with)
	"fmt_tab_width": 8,

	// Whether or not gslint is enabled
	"gslint_enabled": true,

	// Whether or not comp lint is enabled (this might conflict with gslint)
	"comp_lint_enabled": false,

	// how long to wait after the last keystroke before the gslint_cmd command is run (in milliseconds)
	"gslint_timeout": 100,

	// whether or not to include snippets in the auto-completion list
	"autocomplete_snippets": true,

	// whether or not to include Test*, Benchmark* and Example* functions in the auto-completion list
	"autocomplete_tests": false,

	"margo_cmd": ["MarGo"],
	// the tcp address on which MarGo listen/should listen
	// if GoSublime can't connect to `margo_addr` it attempts to start MarGo
	// with `margo_cmd` passing `margo_addr`
	"margo_addr": "127.0.0.1:57951",

	// commands to run on (post) save - list of objects of the form {"cmd": "...", "args": {...}}
	// Any TextCommand may be run. Supported GS commands include:
	//     gs_comp_lint - compile the pkg and report any errors
	"on_save": [],

	// as an alternative to Sublime Text's snippet system you may add snippets to GoSublime's
	// code-completion by adding them to your user settings in the same format as bellow.
	//
	// "snippets": [
	//     {
	//         "match": {"global": true}, // these snippets will only be presented in the global scope
	//         "snippets": [
	//             {"text": "init", "title": "func init()", "value": "func init() {\n\t$1\n}"}
	//         ]
	//     },
	//     {
	//         "match": {"local": true}, // these snippets will only be present in a function scope
	//         "snippets": [
	//             {"text": "print", "title": "print(...)", "value": "print($1)"},
	//             {"text": "println", "title": "println(...)", "value": "println($1)"}
	//         ]
	//     }
	// ]
	//
	// you maybe add field markers ($1, $2, etc) to the `value` string to dictate where the cursor is place
	// once a completion is expanded and where it's placed once you press tab afterwards.
	// duplicate markers e.g f("...", $1, $1) will result in multiple cursors, one for each duplication.
	"snippets": [],

	"auto_complete_triggers": [ {"selector": "source.go", "characters": "."} ]
}